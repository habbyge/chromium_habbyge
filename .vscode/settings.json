{
    "files.associations": {
        "type_traits": "cpp",
        "__config": "cpp",
        "__nullptr": "cpp",
        "__bit_reference": "cpp",
        "__debug": "cpp",
        "__errc": "cpp",
        "__functional_base": "cpp",
        "__hash_table": "cpp",
        "__locale": "cpp",
        "__mutex_base": "cpp",
        "__node_handle": "cpp",
        "__split_buffer": "cpp",
        "__string": "cpp",
        "__threading_support": "cpp",
        "__tree": "cpp",
        "__tuple": "cpp",
        "algorithm": "cpp",
        "any": "cpp",
        "array": "cpp",
        "atomic": "cpp",
        "bit": "cpp",
        "bitset": "cpp",
        "cctype": "cpp",
        "cfenv": "cpp",
        "chrono": "cpp",
        "cinttypes": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "codecvt": "cpp",
        "complex": "cpp",
        "condition_variable": "cpp",
        "csignal": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdint": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "deque": "cpp",
        "exception": "cpp",
        "forward_list": "cpp",
        "fstream": "cpp",
        "functional": "cpp",
        "future": "cpp",
        "initializer_list": "cpp",
        "iomanip": "cpp",
        "ios": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "iterator": "cpp",
        "limits": "cpp",
        "list": "cpp",
        "locale": "cpp",
        "map": "cpp",
        "memory": "cpp",
        "mutex": "cpp",
        "new": "cpp",
        "numeric": "cpp",
        "optional": "cpp",
        "ostream": "cpp",
        "queue": "cpp",
        "random": "cpp",
        "ratio": "cpp",
        "regex": "cpp",
        "scoped_allocator": "cpp",
        "set": "cpp",
        "sstream": "cpp",
        "stack": "cpp",
        "stdexcept": "cpp",
        "streambuf": "cpp",
        "string": "cpp",
        "string_view": "cpp",
        "strstream": "cpp",
        "system_error": "cpp",
        "thread": "cpp",
        "tuple": "cpp",
        "typeindex": "cpp",
        "typeinfo": "cpp",
        "unordered_map": "cpp",
        "unordered_set": "cpp",
        "utility": "cpp",
        "valarray": "cpp",
        "variant": "cpp",
        "vector": "cpp",
        "__bits": "cpp",
        "__memory": "cpp",
        "filesystem": "cpp",
        "*.idl": "cpp",
        "*.inc": "cpp",
        "compare": "cpp",
        "concepts": "cpp",
        "__functional_03": "cpp",
        "memory_resource": "cpp",
        "__functional_base_03": "cpp",
        "__availability": "cpp",
        "__verbose_abort": "cpp",
        "charconv": "cpp"
    },

    "debug.console.fontSize": 10,
    "editor.fontFamily": "Menlo for Powerline",
    "debug.console.fontFamily": "Menlo",
    "scm.inputFontFamily": "Menlo",
    "markdown.preview.fontSize": 10,
    "markdown.preview.fontFamily": "Menlo",
    "markdown.preview.lineHeight": 0,
    "markdown-preview-enhanced.enableEmojiSyntax": true,
    "editor.fontSize": 10,
    "editor.codeLensFontFamily": "Menlo",
    "scm.inputFontSize": 10,
    "terminal.integrated.fontSize": 10,
    "screencastMode.fontSize": 20,
    "terminal.integrated.fontFamily": "Menlo for Powerline",
    "chat.editor.fontSize": 10,
    "terminal.integrated.lineHeight": 0,
    "notebook.output.fontSize": 10,
    "notebook.markup.fontSize": 10,
    "chat.editor.fontFamily": "Menlo for Powerline",

    // java
    "java.referencesCodeLens.enabled": true,
    "java.signatureHelp.enabled": true,
    "java.configuration.runtimes": [
        {
            "name": "JavaSE-17",
            "path": "/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home",
        },
        {
            "default": true,
            "name": "JavaSE-1.8",
            "path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home",
        }
    ],
    "java.jdt.ls.java.home": "/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home",
    "java.import.gradle.java.home": "/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home",
    "kotlin.java.home": "/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home",
    "maven.terminal.useJavaHome": false,
    "java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable",

    "editor.mouseWheelScrollSensitivity": 0.2,
    "search.useIgnoreFiles": false,
    "editor.lineHeight": 1.2,
    "files.trimTrailingWhitespace": false,
    "editor.trimAutoWhitespace": false,
    "editor.inlayHints.fontFamily": "Menlo",
    "editor.inlayHints.fontSize": 10,
    "notebook.output.fontFamily": "Menlo",
    "editor.codeLensFontSize": 10,

    // code run configuration:
    "code-runner.runInTerminal": true,
    "code-runner.executorMap": {
        "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
        "c": "cd $dir && clang $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "cpp": "cd $dir && clang++ -std=c++17 $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "python": "python3 -u",
        "lua": "lua",
    },

    "git.ignoreLimitWarning": true,

    // reviewer
    "acid-gitlab-mr.gitlabServer": "https://code.byted.org/",
    "acid-gitlab-mr.accessToken": "NsYyDpehJqCVDewhy9UX",
    "acid-gitlab-mr.favouriteProjects": [
        "134421" // projectID
    ],

    // c/c++ && clangd
    "C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,
    "C_Cpp.default.compilerPath": "/usr/bin/clang++",
    "clang.cxxflags": [
        "-std=c++17",
        "-O3",
        "-flto",
        "-Wl",
    ],
    "C_Cpp.codeAnalysis.clangTidy.enabled": true,
    "C_Cpp.codeAnalysis.clangTidy.config": "${workspaceFolder}/.clang-tidy",
    "C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "${workspaceFolder}/.clang-tidy",
    "C_Cpp.codeAnalysis.clangTidy.checks.enabled": [
        "*"
    ],
    "C_Cpp.errorSquiggles": "disabled",
    "C_Cpp.intelliSenseEngine": "default",
    // "C_Cpp.intelliSenseEngineFallback": "enabled",
    "C_Cpp.autocomplete": "default",
    "clangd.fallbackFlags": [
        // 设置clangd代码检查的c++版本
        "-std=c++17",
        "-pedantic",
        "-Wall",
        "-Wextra",
        "-Wcast-align",
        "-Wdouble-promotion",
        "-Wformat=2",
        "-Wimplicit-fallthrough",
        "-Wmisleading-indentation",
        "-Wnon-virtual-dtor",
        "-Wnull-dereference",
        "-Wold-style-cast",
        "-Woverloaded-virtual",
        "-Wpedantic",
        "-Wshadow",
        "-Wunused",
        "-pthread",
        "-fuse-ld=lld",
        "-fsanitize=address",
        "-fsanitize=undefined",
        "-stdlib=libc++",
        "-Wno-unused-variable",
        "-Wno-shadow",
        "-Wshadow-field-in-constructor-modified",
        "-Wshadow-ivar",
        "-Wno-implicit-function-declaration",
        "-Wno-switch",
        "-Wno-parentheses",
        "-Wbitwise-op-parentheses",
        "-Wdangling-else",
        "-Wlogical-not-parentheses",
        "-Wlogical-op-parentheses",
        "-Woverloaded-shift-op-parentheses",
        "-Wparentheses-equality",
        "-Wshift-op-parentheses",

        "-DCCORE_MAC",
        "-DCOREMAC",
        "-DLYRA_API_EXPORT",

        "-I${workspaceFolder}/videoeditor/src/",
        "-I${workspaceFolder}/videoeditor/lyra/",
        "-I${workspaceFolder}/videoeditor/libs/",
        "-I${workspaceFolder}/videoeditor/platform/",
        "-I${workspaceFolder}/videoeditor/generated/",
        "-I${workspaceFolder}/videoeditor/",
        "-I${workspaceFolder}/", // 项目根目录

        "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/",
        "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/",
        "-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/15.0.0/include/",
        "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/",
        "-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/",
        "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/",
        "-I~/Library/Android/sdk/ndk/21.3.6528147/toolchains/llvm/prebuilt/darwin-x86_64/sysroot/usr/include/",
        // "-I/Users/bytedance/Mbox-Project-iOS/develop/Pods/TTVideoEditor",
        "-I~/pc_project/videoeditor/pc_config/vesdk/mac/_pod_work_dir/VESDK_Mac/include/"
    ],
    "clangd.arguments": [
        // 全局补全(补全建议会给出在当前作用域不可见的索引,插入后自动补充作用域标识符),例如在main()中直接写cout,
        // 即使没有`#include <iostream>`,也会给出`std::cout`的建议,配合"--header-insertion=iwyu",
        // 还可自动插入缺失的头文件
        "--all-scopes-completion",
        // 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        "--function-arg-placeholders=true",
        // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion-decorators",
        "--clang-tidy", // 启用 Clang-Tidy 以提供「静态检查」
        "--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*",
        "--header-insertion=never",
        "--background-index", // 后台分析并保存索引文件
        "--compile-commands-dir=${workspaceFolder}/../build/",
        "--completion-parse=auto", // 当 clangd 准备就绪时，用它来分析建议
        "--j=8",
        "--cross-file-rename",
        "--completion-style=detailed",
        "--pch-storage=memory", // pch 优化的位置(Memory 或 Disk,前者会增加内存开销，但会提升性能)
        "--pretty", // 输出的 JSON 文件更美观
        "--pch-storage=disk",
        "--log=verbose",
        // 启用配置文件(YAML格式)项目配置文件是在项目文件夹里的“.clangd”,用户配置文件是“clangd/config.yaml”,
        // 该文件来自:Windows: %USERPROFILE%\AppData\Local || MacOS: ~/Library/Preferences/ || Others: $XDG_CONFIG_HOME, usually ~/.config
        "--enable-config",
        "--query-driver=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"
    ],
    "clangd.checkUpdates": false,

    // 使用Ninja编译时能更快一些，而且能看进度，生成VS的sln项目构建时看不到……
    "cmake.generator": "Ninja",
    // 设置并行编译数量，建议比核心数少1到2个，这个在我本地试的情况是能有效缓解白屏
    // 在VS的Options>Projects and Solutions>Build And Run里虽然可以设置并行编译的数量，但个人实测对卡白屏的缓解效果有限
    "cmake.parallelJobs": 8,
    "cmake.configureArgs": [
        "-DENABLE_PCH=0",
        "-DCMAKE_OSX_ARCHITECTURES=arm64",
        "-DCMAKE_BUILD_TYPE=Debug",
        // "-DCMAKE_C_COMPILER=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang",
        // "-DCMAKE_CXX_COMPILER=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++",
        "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -g",
        // "-DBUILD_OVERSEA=ON",
        // "-DCMAKE_PRODUCT_TYPE=\"CapCut\"",
        // "-DENABLE_MOJO=ON"
    ],

}